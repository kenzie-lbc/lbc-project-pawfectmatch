@startuml
class com.kenzie.appserver.controller.PetController {
- PetService petService
~ <<Create>> PetController(PetService)
+ ResponseEntity<Pet> createPet(MultipartFile,Pet)
+ ResponseEntity<List<Pet>> getPetsByType(String)
}
class com.kenzie.appserver.config.CacheConfig {
}
class com.kenzie.appserver.config.ExecutorServiceConfig {
+ TaskExecutor executorService()
}
class com.kenzie.appserver.Application {
+ {static} void main(String[])
}
class com.kenzie.appserver.service.UserService {
- UserRepository userRepository
+ <<Create>> UserService(UserRepository)
+ User createUser(User)
+ User findUserByUsername(String)
+ User updateUser(User)
+ String getLoggedInUserId()
+ void deleteUser(String)
+ User authenticateUser(String,String)
}
interface com.kenzie.appserver.repositories.PetRepository {
~ Pet save(Pet)
~ List<Pet> findByType(String)
}
class com.kenzie.appserver.controller.ExampleController {
- ExampleService exampleService
~ <<Create>> ExampleController(ExampleService)
+ ResponseEntity<ExampleResponse> get(String)
+ ResponseEntity<ExampleResponse> addNewConcert(ExampleCreateRequest)
}
interface com.kenzie.appserver.repositories.ExampleRepository {
}
class com.kenzie.appserver.controller.model.ExampleCreateRequest {
- String name
+ String getName()
+ void setName(String)
}
interface com.kenzie.appserver.repositories.UserRepository {
~ User save(User)
~ User findByUsername(String)
}
class com.kenzie.appserver.repositories.model.User {
- String uniqueId
- String username
- String role
- String password
- Boolean adopted
+ <<Create>> User()
+ String getId()
+ String getRole()
+ String getName()
+ void setId(String)
+ void setName(String)
+ void setRole(String)
+ boolean equals(Object)
+ int hashCode()
+ String getUniqueId()
+ void setUniqueId(String)
+ String getUsername()
+ void setUsername(String)
+ Object getPassword()
+ void setPassword(String)
+ Boolean getAdopted()
+ void setAdopted(Boolean)
}
class com.kenzie.appserver.repositories.model.Pet {
- String id
- String adoptionId
- String name
- String type
- int age
- String imageUrl
+ <<Create>> Pet()
+ String getId()
+ String getType()
+ String getName()
+ void setId(String)
+ void setName(String)
+ void setType(String)
+ int getAge()
+ void setAge(int)
+ String getAdoptionId()
+ void setAdoptionId(String)
+ boolean equals(Object)
+ int hashCode()
+ String getImageUrl()
+ void setImageUrl(String)
}
class com.kenzie.appserver.service.PetService {
- PetRepository petRepository
+ <<Create>> PetService(PetRepository)
+ Pet createPet(Pet)
+ List<Pet> findPetsByType(String)
+ List<Pet> findDogs()
+ List<Pet> findCats()
}
class com.kenzie.appserver.service.model.Example {
- String id
- String name
+ <<Create>> Example(String,String)
+ String getId()
+ String getName()
}
class com.kenzie.appserver.controller.model.AuthenticationRequest {
- String username
- String password
+ String getUsername()
+ void setUsername(String)
+ String getPassword()
+ void setPassword(String)
}
class com.kenzie.appserver.controller.BaseController {
+ ResponseEntity getServiceName()
}
class com.kenzie.appserver.controller.model.ExampleResponse {
- String id
- String name
+ String getId()
+ void setId(String)
+ String getName()
+ void setName(String)
}
class com.kenzie.appserver.service.ExampleService {
- ExampleRepository exampleRepository
+ <<Create>> ExampleService(ExampleRepository)
+ Example findById(String)
+ Example addNewExample(Example)
}
class com.kenzie.appserver.ApplicationStartUpListener {
+ void onApplicationEvent(ContextRefreshedEvent)
}
class com.kenzie.appserver.service.UniqueIdGenerator {
- {static} String ALPHANUMERIC_STRING
- {static} Set<String> existingIds
+ {static} String generatePetId(String)
+ {static} String generateUserId(String)
+ {static} boolean idExists(String)
}
class com.kenzie.appserver.repositories.model.ExampleRecord {
- String id
- String name
+ String getId()
+ String getName()
+ void setId(String)
+ void setName(String)
+ boolean equals(Object)
+ int hashCode()
}
class com.kenzie.appserver.controller.UserController {
- UserService userService
+ <<Create>> UserController(UserService)
+ ResponseEntity<User> createUser(User)
+ ResponseEntity<User> getUserByUsername(String)
+ ResponseEntity<User> updateUser(User)
+ ResponseEntity<Void> deleteUser(String)
}
class com.kenzie.appserver.Scheduler {
}
class com.kenzie.appserver.service.ExampleServiceTest {
- ExampleRepository exampleRepository
- ExampleService exampleService
~ void setup()
~ void findById()
~ void findByConcertId_invalid()
}
class com.kenzie.appserver.config.DynamoDbConfig {
~ String dynamoOverrideEndpoint
+ AmazonDynamoDB amazonDynamoDB(String)
+ AmazonDynamoDB defaultAmazonDynamoDb()
}


org.springframework.data.repository.CrudRepository <|-- com.kenzie.appserver.repositories.PetRepository
org.springframework.data.repository.CrudRepository <|-- com.kenzie.appserver.repositories.ExampleRepository
org.springframework.data.repository.CrudRepository <|-- com.kenzie.appserver.repositories.UserRepository
@enduml